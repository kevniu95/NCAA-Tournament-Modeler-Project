# from flask import Flask
# from flask_sqlalchemy import SQLAlchemy
# from flask_migrate import Migrate

# app = Flask(__name__)

import sys 
import uuid
import os
import time
# print(sys.path)
sys.path.insert(0, '/home/ec2-user/ncaa/source/simulation_models/')
sys.path.insert(0, '../source/simulation_models/')
# print(sys.path)


from flask import (Flask, abort, flash, redirect, render_template, 
  request, session, url_for)
from simulation import Simulation
from typing import Tuple, Dict

import base64
from io import BytesIO
from matplotlib.figure import Figure

app = Flask(__name__)


def plotHistogram(fanHist : Dict[int, int], score : int) -> bytes:
    """
    Converts dictionary histogram into real matplotlib 
    histogram, which is then encoded for sending to web app
        -Dictionary generated by _collapseFanScores() method
         in Simulation class
    """
    ans = []
    for k, v in fanHist.items():
        ans += [k] * v

    fig = Figure()
    axis = fig.add_subplot(1, 1, 1)
    axis.hist(ans, bins = 20)
    axis.axvline(score, color='k', linestyle='dashed', linewidth=1)

    buf = BytesIO()
    fig.savefig(buf, format="png")
    data = base64.b64encode(buf.getbuffer())
    return data
    

@app.route("/", methods = ['GET'])
def simulate():
    thisId = str(uuid.uuid4())
    return render_template('simulate.html')

@app.route('/results', methods = ['POST'])
def results():
    start = time.time()
    link = request.form['espnLink']
    sim = Simulation(myBracketUrl = link)
    first = True
    sizes = [100 , 1000, 10000, 25000]
    results = {}
    for i in sizes:
        predBracket = sim.runSimulation(poolSize = i, resetPreds = first)
        res :  Tuple[str, str, bytes, Dict] = sim.scoreSimulation()
        score, percentile, histNums, visualization = res
        fanHist = plotHistogram(histNums, int(score))
        return_dict = {'pred_arr' : predBracket.tostring(),
                        'score' : score,
                        'percentile' : percentile, 
                        'histNums' : histNums,
                        'fanHist' : fanHist,
                        'visualization' : visualization}
        results[i] = return_dict
        if first:
            first = False
        # Write out item to Dynamo DB
    print(time.time() - start)
    return render_template('results.html', results = results)

# @app.route('/specific_results/<competitors>/<neighbors>')
# def specific_results(competitors, neighbors):
#     print(neighbors)
#     return f"You have {competitors} total competitors!"

app.run(host='0.0.0.0', debug=True)
